{
    "sourceFile": "Back-end/src/app/models/User.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 22,
            "patches": [
                {
                    "date": 1633141361615,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1633142048534,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,10 +10,10 @@\n     },\r\n     email: {\r\n         type:String, \r\n          trim:true, \r\n-         required:[true,\"mssv is required\"], \r\n-         maxlength:9\r\n+         required:[true,\"email is required\"]\r\n+         \r\n     },\r\n     password: {\r\n         type:String,\r\n          required:[true,\"password is required\"], \r\n"
                },
                {
                    "date": 1633143140304,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,19 +5,19 @@\n const userSchema = new mongoose.Schema({\r\n     username: {\r\n         type:String,\r\n         trim:true, \r\n-        required:[true,\"username is required\"], \r\n+        //required:[true,\"username is required\"], \r\n     },\r\n     email: {\r\n         type:String, \r\n          trim:true, \r\n-         required:[true,\"email is required\"]\r\n+         //required:[true,\"email is required\"]\r\n          \r\n     },\r\n     password: {\r\n         type:String,\r\n-         required:[true,\"password is required\"], \r\n+         //required:[true,\"password is required\"], \r\n         minlength:[6, \r\n         'Password must be at least 6 character!']\r\n     },\r\n \r\n"
                },
                {
                    "date": 1633144094848,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,43 +1,37 @@\n-const mongoose = require('mongoose');\r\n+const mongoose = require(\"mongoose\");\r\n \r\n-const bcrypt = require('bcryptjs')\r\n+const jwt = require('jsonwebtoken');\r\n \r\n+const bcrypt = require('bcryptjs');\r\n+\r\n const userSchema = new mongoose.Schema({\r\n-    username: {\r\n+\r\n+    firstname:{\r\n+        type: String,\r\n+        trim:true,\r\n+\r\n+    },\r\n+    lastname:{\r\n         type:String,\r\n-        trim:true, \r\n-        //required:[true,\"username is required\"], \r\n+        trim:true\r\n     },\r\n-    email: {\r\n-        type:String, \r\n-         trim:true, \r\n-         //required:[true,\"email is required\"]\r\n-         \r\n+    username:{\r\n+        type:String,\r\n+        trim:true,\r\n+        required:[true,\"username is required \"],\r\n+        unique:true,\r\n+        index:true\r\n     },\r\n-    password: {\r\n+    email:{\r\n         type:String,\r\n-         //required:[true,\"password is required\"], \r\n+        trim:true,\r\n+        required:[true,\"email is requried\"]\r\n+    },\r\n+    pasword:{\r\n+        type:String,\r\n\\ No newline at end of file\n+        trim:true,\r\n+        required:[true,\"pasword is required\"],\r\n         minlength:[6, \r\n-        'Password must be at least 6 character!']\r\n-    },\r\n-\r\n-\r\n-},{timestamps:true})\r\n-\r\n-userSchema.pre('save', function(next){\r\n-    let user = this; // get userget the user initialized from mongose\r\n-\r\n-    //bcrypt pass\r\n-    bcrypt.hash(user.password, 10, function(error, hash){\r\n-        if(error){\r\n-            return next(error);\r\n-        }else{\r\n-            user.password = hash;\r\n-            next();\r\n-        }\r\n-    })\r\n-})\r\n-\r\n-const User = mongoose.model('User', userSchema);\r\n-\r\n-module.exports = User;\n+            'Password must be at least 6 character!']\r\n+    }\r\n+})\n\\ No newline at end of file\n"
                },
                {
                    "date": 1633144289782,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,5 +33,8 @@\n         required:[true,\"pasword is required\"],\r\n         minlength:[6, \r\n             'Password must be at least 6 character!']\r\n     }\r\n-})\n\\ No newline at end of file\n+},{timestamps:true})\r\n+\r\n+\r\n+module.exports = mongoose.model('User', userSchema),\n\\ No newline at end of file\n"
                },
                {
                    "date": 1633158252258,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,54 @@\n+const mongoose = require(\"mongoose\");\r\n+\r\n+const jwt = require('jsonwebtoken');\r\n+\r\n+const bcrypt = require('bcryptjs');\r\n+\r\n+const userSchema = new mongoose.Schema({\r\n+\r\n+    firstname:{\r\n+        type: String,\r\n+        trim:true,\r\n+\r\n+    },\r\n+    lastname:{\r\n+        type:String,\r\n+        trim:true\r\n+    },\r\n+    username:{\r\n+        type:String,\r\n+        trim:true,\r\n+        required:[true,\"username is required \"],\r\n+        unique:true,\r\n+        index:true\r\n+    },\r\n+    email:{\r\n+        type:String,\r\n+        trim:true,\r\n+        required:[true,\"email is requried\"]\r\n+    },\r\n+    pasword:{\r\n+        type:String,\r\n+        trim:true,\r\n+        required:[true,\"pasword is required\"],\r\n+        minlength:[6, \r\n+            'Password must be at least 6 character!']\r\n+    }\r\n+},{timestamps:true})\r\n+\r\n+userSchema.pre('save', function(next){\r\n+    let user = this; // get userget the user initialized from mongose\r\n+\r\n+    //bcrypt pass\r\n+    bcrypt.hash(user.password, 10, function(error, hash){\r\n+        if(error){\r\n+            return next(error);\r\n+        }else{\r\n+            user.password = hash;\r\n+            next();\r\n+        }\r\n+    })\r\n+})\r\n+\r\n+\r\n+module.exports = mongoose.model('User', userSchema);\n\\ No newline at end of file\n"
                },
                {
                    "date": 1633159765942,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,54 @@\n+const mongoose = require(\"mongoose\");\r\n+\r\n+const jwt = require('jsonwebtoken');\r\n+\r\n+const bcrypt = require('bcryptjs');\r\n+\r\n+const userSchema = new mongoose.Schema({\r\n+\r\n+    firstname:{\r\n+        type: String,\r\n+        trim:true,\r\n+\r\n+    },\r\n+    lastname:{\r\n+        type:String,\r\n+        trim:true\r\n+    },\r\n+    username:{\r\n+        type:String,\r\n+        trim:true,\r\n+        required:[true,\"username is required \"],\r\n+        unique:true,\r\n+        index:true\r\n+    },\r\n+    email:{\r\n+        type:String,\r\n+        trim:true,\r\n+        required:[true,\"email is requried\"]\r\n+    },\r\n+    password:{\r\n+        type:String,\r\n+        trim:true,\r\n+        required:[true,\"pasword is required\"],\r\n+        minlength:[6, \r\n+            'Password must be at least 6 character!']\r\n+    }\r\n+},{timestamps:true})\r\n+\r\n+userSchema.pre('save', function(next){\r\n+    let user = this; // get userget the user initialized from mongose\r\n+\r\n+    //bcrypt pass\r\n+    bcrypt.hash(user.password, 10, function(error, hash){\r\n+        if(error){\r\n+            return next(error);\r\n+        }else{\r\n+            user.password = hash;\r\n+            next();\r\n+        }\r\n+    })\r\n+})\r\n+\r\n+\r\n+module.exports = mongoose.model('User', userSchema);\n\\ No newline at end of file\n"
                },
                {
                    "date": 1633161296037,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,66 @@\n+const mongoose = require(\"mongoose\");\r\n+\r\n+const jwt = require('jsonwebtoken');\r\n+\r\n+const bcrypt = require('bcryptjs');\r\n+\r\n+const userSchema = new mongoose.Schema({\r\n+\r\n+    firstname:{\r\n+        type: String,\r\n+        trim:true,\r\n+\r\n+    },\r\n+    lastname:{\r\n+        type:String,\r\n+        trim:true\r\n+    },\r\n+    username:{\r\n+        type:String,\r\n+        trim:true,\r\n+        required:[true,\"username is required \"],\r\n+        unique:true,\r\n+        index:true\r\n+    },\r\n+    email:{\r\n+        type:String,\r\n+        trim:true,\r\n+        required:[true,\"email is requried\"]\r\n+    },\r\n+    password:{\r\n+        type:String,\r\n+        trim:true,\r\n+        required:[true,\"pasword is required\"],\r\n+        minlength:[6, \r\n+            'Password must be at least 6 character!']\r\n+    },\r\n+\r\n+    role:{\r\n+        type:String,\r\n+        enum:['user', 'admin'],\r\n+        default:'admin'\r\n+    },\r\n+    contactphone:{\r\n+        type:String\r\n+    },\r\n+    profilepicture:{\r\n+        type:String\r\n+    }\r\n+},{timestamps:true})\r\n+\r\n+userSchema.pre('save', function(next){\r\n+    let user = this; // get userget the user initialized from mongose\r\n+\r\n+    //bcrypt pass\r\n+    bcrypt.hash(user.password, 10, function(error, hash){\r\n+        if(error){\r\n+            return next(error);\r\n+        }else{\r\n+            user.password = hash;\r\n+            next();\r\n+        }\r\n+    })\r\n+})\r\n+\r\n+\r\n+module.exports = mongoose.model('User', userSchema);\n\\ No newline at end of file\n"
                },
                {
                    "date": 1633178192375,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,66 @@\n+const mongoose = require(\"mongoose\");\r\n+\r\n+const jwt = require('jsonwebtoken');\r\n+\r\n+const bcrypt = require('bcryptjs');\r\n+\r\n+const userSchema = new mongoose.Schema({\r\n+\r\n+    firstname:{\r\n+        type: String,\r\n+        trim:true,\r\n+\r\n+    },\r\n+    lastname:{\r\n+        type:String,\r\n+        trim:true\r\n+    },\r\n+    username:{\r\n+        type:String,\r\n+        trim:true,\r\n+        required:[true,\"username is required \"],\r\n+        unique:true,\r\n+        index:true\r\n+    },\r\n+    email:{\r\n+        type:String,\r\n+        trim:true,\r\n+        required:[true,\"email is requried\"]\r\n+    },\r\n+    password:{\r\n+        type:String,\r\n+        trim:true,\r\n+        required:[true,\"pasword is required\"],\r\n+        minlength:[6, \r\n+            'Password must be at least 6 character!']\r\n+    },\r\n+\r\n+    role:{\r\n+        type:String,\r\n+        enum:['user', 'admin'],\r\n+        default:'user'\r\n+    },\r\n+    contactphone:{\r\n+        type:String\r\n+    },\r\n+    profilepicture:{\r\n+        type:String\r\n+    }\r\n+},{timestamps:true})\r\n+\r\n+userSchema.pre('save', function(next){\r\n+    let user = this; // get userget the user initialized from mongose\r\n+\r\n+    //bcrypt pass\r\n+    bcrypt.hash(user.password, 10, function(error, hash){\r\n+        if(error){\r\n+            return next(error);\r\n+        }else{\r\n+            user.password = hash;\r\n+            next();\r\n+        }\r\n+    })\r\n+})\r\n+\r\n+\r\n+module.exports = mongoose.model('User', userSchema);\n\\ No newline at end of file\n"
                },
                {
                    "date": 1633184911407,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,68 @@\n+const mongoose = require(\"mongoose\");\r\n+\r\n+const jwt = require('jsonwebtoken');\r\n+\r\n+const bcrypt = require('bcryptjs');\r\n+\r\n+const userSchema = new mongoose.Schema({\r\n+\r\n+    firstname:{\r\n+        type: String,\r\n+        trim:true,\r\n+\r\n+    },\r\n+    lastname:{\r\n+        type:String,\r\n+        trim:true\r\n+    },\r\n+    username:{\r\n+        type:String,\r\n+        trim:true,\r\n+        required:[true,\"username is required \"],\r\n+        unique:true,\r\n+        index:true\r\n+    },\r\n+    email:{\r\n+        type:String,\r\n+        trim:true,\r\n+        unique:true,\r\n+        required:[true,\"email is requried\"]\r\n+    },\r\n+    password:{\r\n+        type:String,\r\n+        trim:true,\r\n+        required:[true,\"pasword is required\"],\r\n+        minlength:[6, \r\n+            'Password must be at least 6 character!']\r\n+    },\r\n+\r\n+    role:{\r\n+        type:String,\r\n+        enum:['user', 'admin'],\r\n+        default:'user'\r\n+    },\r\n+    contactphone:{\r\n+        type:String,\r\n+        unique:true,\r\n+    },\r\n+    profilepicture:{\r\n+        type:String\r\n+    }\r\n+},{timestamps:true})\r\n+\r\n+userSchema.pre('save', function(next){\r\n+    let user = this; // get userget the user initialized from mongose\r\n+\r\n+    //bcrypt pass\r\n+    bcrypt.hash(user.password, 10, function(error, hash){\r\n+        if(error){\r\n+            return next(error);\r\n+        }else{\r\n+            user.password = hash;\r\n+            next();\r\n+        }\r\n+    })\r\n+})\r\n+\r\n+\r\n+module.exports = mongoose.model('User', userSchema);\n\\ No newline at end of file\n"
                },
                {
                    "date": 1634224968598,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,285 +64,5 @@\n     })\r\n })\r\n \r\n \r\n-module.exports = mongoose.model('User', userSchema);\n-const mongoose = require(\"mongoose\");\r\n-\r\n-const jwt = require('jsonwebtoken');\r\n-\r\n-const bcrypt = require('bcryptjs');\r\n-\r\n-const userSchema = new mongoose.Schema({\r\n-\r\n-    firstname:{\r\n-        type: String,\r\n-        trim:true,\r\n-\r\n-    },\r\n-    lastname:{\r\n-        type:String,\r\n-        trim:true\r\n-    },\r\n-    username:{\r\n-        type:String,\r\n-        trim:true,\r\n-        required:[true,\"username is required \"],\r\n-        unique:true,\r\n-        index:true\r\n-    },\r\n-    email:{\r\n-        type:String,\r\n-        trim:true,\r\n-        required:[true,\"email is requried\"]\r\n-    },\r\n-    password:{\r\n-        type:String,\r\n-        trim:true,\r\n-        required:[true,\"pasword is required\"],\r\n-        minlength:[6, \r\n-            'Password must be at least 6 character!']\r\n-    },\r\n-\r\n-    role:{\r\n-        type:String,\r\n-        enum:['user', 'admin'],\r\n-        default:'user'\r\n-    },\r\n-    contactphone:{\r\n-        type:String\r\n-    },\r\n-    profilepicture:{\r\n-        type:String\r\n-    }\r\n-},{timestamps:true})\r\n-\r\n-userSchema.pre('save', function(next){\r\n-    let user = this; // get userget the user initialized from mongose\r\n-\r\n-    //bcrypt pass\r\n-    bcrypt.hash(user.password, 10, function(error, hash){\r\n-        if(error){\r\n-            return next(error);\r\n-        }else{\r\n-            user.password = hash;\r\n-            next();\r\n-        }\r\n-    })\r\n-})\r\n-\r\n-\r\n-module.exports = mongoose.model('User', userSchema);\n-const mongoose = require(\"mongoose\");\r\n-\r\n-const jwt = require('jsonwebtoken');\r\n-\r\n-const bcrypt = require('bcryptjs');\r\n-\r\n-const userSchema = new mongoose.Schema({\r\n-\r\n-    firstname:{\r\n-        type: String,\r\n-        trim:true,\r\n-\r\n-    },\r\n-    lastname:{\r\n-        type:String,\r\n-        trim:true\r\n-    },\r\n-    username:{\r\n-        type:String,\r\n-        trim:true,\r\n-        required:[true,\"username is required \"],\r\n-        unique:true,\r\n-        index:true\r\n-    },\r\n-    email:{\r\n-        type:String,\r\n-        trim:true,\r\n-        required:[true,\"email is requried\"]\r\n-    },\r\n-    password:{\r\n-        type:String,\r\n-        trim:true,\r\n-        required:[true,\"pasword is required\"],\r\n-        minlength:[6, \r\n-            'Password must be at least 6 character!']\r\n-    },\r\n-\r\n-    role:{\r\n-        type:String,\r\n-        enum:['user', 'admin'],\r\n-        default:'admin'\r\n-    },\r\n-    contactphone:{\r\n-        type:String\r\n-    },\r\n-    profilepicture:{\r\n-        type:String\r\n-    }\r\n-},{timestamps:true})\r\n-\r\n-userSchema.pre('save', function(next){\r\n-    let user = this; // get userget the user initialized from mongose\r\n-\r\n-    //bcrypt pass\r\n-    bcrypt.hash(user.password, 10, function(error, hash){\r\n-        if(error){\r\n-            return next(error);\r\n-        }else{\r\n-            user.password = hash;\r\n-            next();\r\n-        }\r\n-    })\r\n-})\r\n-\r\n-\r\n-module.exports = mongoose.model('User', userSchema);\n-const mongoose = require(\"mongoose\");\r\n-\r\n-const jwt = require('jsonwebtoken');\r\n-\r\n-const bcrypt = require('bcryptjs');\r\n-\r\n-const userSchema = new mongoose.Schema({\r\n-\r\n-    firstname:{\r\n-        type: String,\r\n-        trim:true,\r\n-\r\n-    },\r\n-    lastname:{\r\n-        type:String,\r\n-        trim:true\r\n-    },\r\n-    username:{\r\n-        type:String,\r\n-        trim:true,\r\n-        required:[true,\"username is required \"],\r\n-        unique:true,\r\n-        index:true\r\n-    },\r\n-    email:{\r\n-        type:String,\r\n-        trim:true,\r\n-        required:[true,\"email is requried\"]\r\n-    },\r\n-    password:{\r\n-        type:String,\r\n-        trim:true,\r\n-        required:[true,\"pasword is required\"],\r\n-        minlength:[6, \r\n-            'Password must be at least 6 character!']\r\n-    }\r\n-},{timestamps:true})\r\n-\r\n-userSchema.pre('save', function(next){\r\n-    let user = this; // get userget the user initialized from mongose\r\n-\r\n-    //bcrypt pass\r\n-    bcrypt.hash(user.password, 10, function(error, hash){\r\n-        if(error){\r\n-            return next(error);\r\n-        }else{\r\n-            user.password = hash;\r\n-            next();\r\n-        }\r\n-    })\r\n-})\r\n-\r\n-\r\n-module.exports = mongoose.model('User', userSchema);\n-const mongoose = require(\"mongoose\");\r\n-\r\n-const jwt = require('jsonwebtoken');\r\n-\r\n-const bcrypt = require('bcryptjs');\r\n-\r\n-const userSchema = new mongoose.Schema({\r\n-\r\n-    firstname:{\r\n-        type: String,\r\n-        trim:true,\r\n-\r\n-    },\r\n-    lastname:{\r\n-        type:String,\r\n-        trim:true\r\n-    },\r\n-    username:{\r\n-        type:String,\r\n-        trim:true,\r\n-        required:[true,\"username is required \"],\r\n-        unique:true,\r\n-        index:true\r\n-    },\r\n-    email:{\r\n-        type:String,\r\n-        trim:true,\r\n-        required:[true,\"email is requried\"]\r\n-    },\r\n-    pasword:{\r\n-        type:String,\r\n-        trim:true,\r\n-        required:[true,\"pasword is required\"],\r\n-        minlength:[6, \r\n-            'Password must be at least 6 character!']\r\n-    }\r\n-},{timestamps:true})\r\n-\r\n-userSchema.pre('save', function(next){\r\n-    let user = this; // get userget the user initialized from mongose\r\n-\r\n-    //bcrypt pass\r\n-    bcrypt.hash(user.password, 10, function(error, hash){\r\n-        if(error){\r\n-            return next(error);\r\n-        }else{\r\n-            user.password = hash;\r\n-            next();\r\n-        }\r\n-    })\r\n-})\r\n-\r\n-\r\n-module.exports = mongoose.model('User', userSchema);\n-const mongoose = require(\"mongoose\");\r\n-\r\n-const jwt = require('jsonwebtoken');\r\n-\r\n-const bcrypt = require('bcryptjs');\r\n-\r\n-const userSchema = new mongoose.Schema({\r\n-\r\n-    firstname:{\r\n-        type: String,\r\n-        trim:true,\r\n-\r\n-    },\r\n-    lastname:{\r\n-        type:String,\r\n-        trim:true\r\n-    },\r\n-    username:{\r\n-        type:String,\r\n-        trim:true,\r\n-        required:[true,\"username is required \"],\r\n-        unique:true,\r\n-        index:true\r\n-    },\r\n-    email:{\r\n-        type:String,\r\n-        trim:true,\r\n-        required:[true,\"email is requried\"]\r\n-    },\r\n-    pasword:{\r\n-        type:String,\r\n-        trim:true,\r\n-        required:[true,\"pasword is required\"],\r\n-        minlength:[6, \r\n-            'Password must be at least 6 character!']\r\n-    }\r\n-},{timestamps:true})\r\n-\r\n-\r\n-module.exports = mongoose.model('User', userSchema),\n\\ No newline at end of file\n+module.exports = mongoose.model('User', userSchema);\n\\ No newline at end of file\n"
                },
                {
                    "date": 1635176110420,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,17 +5,17 @@\n const bcrypt = require('bcryptjs');\r\n \r\n const userSchema = new mongoose.Schema({\r\n \r\n-    firstname:{\r\n-        type: String,\r\n-        trim:true,\r\n+    // firstname:{\r\n+    //     type: String,\r\n+    //     trim:true,\r\n \r\n-    },\r\n-    lastname:{\r\n-        type:String,\r\n-        trim:true\r\n-    },\r\n+    // },\r\n+    // lastname:{\r\n+    //     type:String,\r\n+    //     trim:true\r\n+    // },\r\n     username:{\r\n         type:String,\r\n         trim:true,\r\n         required:[true,\"username is required \"],\r\n@@ -35,20 +35,20 @@\n         minlength:[6, \r\n             'Password must be at least 6 character!']\r\n     },\r\n \r\n-    role:{\r\n-        type:String,\r\n-        enum:['user', 'admin'],\r\n-        default:'user'\r\n-    },\r\n-    contactphone:{\r\n-        type:String,\r\n-        unique:true,\r\n-    },\r\n-    profilepicture:{\r\n-        type:String\r\n-    }\r\n+    // role:{\r\n+    //     type:String,\r\n+    //     enum:['user', 'admin'],\r\n+    //     default:'user'\r\n+    // },\r\n+    // contactphone:{\r\n+    //     type:String,\r\n+    //     unique:true,\r\n+    // },\r\n+    // profilepicture:{\r\n+    //     type:String\r\n+    // }\r\n },{timestamps:true})\r\n \r\n userSchema.pre('save', function(next){\r\n     let user = this; // get userget the user initialized from mongose\r\n"
                },
                {
                    "date": 1635263120699,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n     // contactphone:{\r\n     //     type:String,\r\n     //     unique:true,\r\n     // },\r\n-    // profilepicture:{\r\n+    // profilepicture:{     \r\n     //     type:String\r\n     // }\r\n },{timestamps:true})\r\n \r\n@@ -60,9 +60,9 @@\n         }else{\r\n             user.password = hash;\r\n             next();\r\n         }\r\n-    })\r\n+    })  \r\n })\r\n \r\n \r\n module.exports = mongoose.model('User', userSchema);\n\\ No newline at end of file\n"
                },
                {
                    "date": 1635265320609,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,8 +35,14 @@\n         minlength:[6, \r\n             'Password must be at least 6 character!']\r\n     },\r\n \r\n+    status:{\r\n+        type:String,\r\n+        trim:true,\r\n+        default:'true'\r\n+    }\r\n+\r\n     // role:{\r\n     //     type:String,\r\n     //     enum:['user', 'admin'],\r\n     //     default:'user'\r\n"
                },
                {
                    "date": 1635267122693,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n             'Password must be at least 6 character!']\r\n     },\r\n \r\n     status:{\r\n-        type:String,\r\n+        type:Boolean,\r\n         trim:true,\r\n         default:'true'\r\n     }\r\n \r\n"
                },
                {
                    "date": 1635267148852,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,10 +37,9 @@\n     },\r\n \r\n     status:{\r\n         type:Boolean,\r\n-        trim:true,\r\n-        default:'true'\r\n+        default:true\r\n     }\r\n \r\n     // role:{\r\n     //     type:String,\r\n"
                },
                {
                    "date": 1635316038797,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,73 @@\n+const mongoose = require(\"mongoose\");\r\n+\r\n+const jwt = require('jsonwebtoken');\r\n+\r\n+const bcrypt = require('bcryptjs');\r\n+\r\n+const userSchema = new mongoose.Schema({\r\n+\r\n+    // firstname:{\r\n+    //     type: String,\r\n+    //     trim:true,\r\n+\r\n+    // },\r\n+    // lastname:{\r\n+    //     type:String,\r\n+    //     trim:true\r\n+    // },\r\n+    username:{\r\n+        type:String,\r\n+        trim:true,\r\n+        required:[true,\"username is required \"],\r\n+        unique:true,\r\n+        index:true\r\n+    },\r\n+    email:{\r\n+        type:String,\r\n+        trim:true,\r\n+        unique:true,\r\n+        required:[true,\"email is requried\"]\r\n+    },\r\n+    password:{\r\n+        type:String,\r\n+        trim:true,\r\n+        required:[true,\"pasword is required\"],\r\n+        minlength:[6, \r\n+            'Password must be at least 6 character!']\r\n+    },\r\n+\r\n+    status:{\r\n+        type:Boolean,\r\n+        default:true\r\n+    },\r\n+\r\n+    role:{\r\n+        type:String,\r\n+        enum:['user', 'admin'],\r\n+        default:'user'\r\n+    },\r\n+    // contactphone:{\r\n+    //     type:String,\r\n+    //     unique:true,\r\n+    // },\r\n+    // profilepicture:{     \r\n+    //     type:String\r\n+    // }\r\n+},{timestamps:true})\r\n+\r\n+userSchema.pre('save', function(next){\r\n+    let user = this; // get userget the user initialized from mongose\r\n+\r\n+    //bcrypt pass\r\n+    bcrypt.hash(user.password, 10, function(error, hash){\r\n+        if(error){\r\n+            return next(error);\r\n+        }else{\r\n+            user.password = hash;\r\n+            next();\r\n+        }\r\n+    })  \r\n+})\r\n+\r\n+\r\n+module.exports = mongoose.model('User', userSchema);\n\\ No newline at end of file\n"
                },
                {
                    "date": 1635318905258,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,81 +40,8 @@\n         type:Boolean,\r\n         default:true\r\n     },\r\n \r\n-    role:{\r\n-        type:String,\r\n-        enum:['user', 'admin'],\r\n-        default:'user'\r\n-    },\r\n-    // contactphone:{\r\n-    //     type:String,\r\n-    //     unique:true,\r\n-    // },\r\n-    // profilepicture:{     \r\n-    //     type:String\r\n-    // }\r\n-},{timestamps:true})\r\n-\r\n-userSchema.pre('save', function(next){\r\n-    let user = this; // get userget the user initialized from mongose\r\n-\r\n-    //bcrypt pass\r\n-    bcrypt.hash(user.password, 10, function(error, hash){\r\n-        if(error){\r\n-            return next(error);\r\n-        }else{\r\n-            user.password = hash;\r\n-            next();\r\n-        }\r\n-    })  \r\n-})\r\n-\r\n-\r\n-module.exports = mongoose.model('User', userSchema);\n-const mongoose = require(\"mongoose\");\r\n-\r\n-const jwt = require('jsonwebtoken');\r\n-\r\n-const bcrypt = require('bcryptjs');\r\n-\r\n-const userSchema = new mongoose.Schema({\r\n-\r\n-    // firstname:{\r\n-    //     type: String,\r\n-    //     trim:true,\r\n-\r\n-    // },\r\n-    // lastname:{\r\n-    //     type:String,\r\n-    //     trim:true\r\n-    // },\r\n-    username:{\r\n-        type:String,\r\n-        trim:true,\r\n-        required:[true,\"username is required \"],\r\n-        unique:true,\r\n-        index:true\r\n-    },\r\n-    email:{\r\n-        type:String,\r\n-        trim:true,\r\n-        unique:true,\r\n-        required:[true,\"email is requried\"]\r\n-    },\r\n-    password:{\r\n-        type:String,\r\n-        trim:true,\r\n-        required:[true,\"pasword is required\"],\r\n-        minlength:[6, \r\n-            'Password must be at least 6 character!']\r\n-    },\r\n-\r\n-    status:{\r\n-        type:Boolean,\r\n-        default:true\r\n-    }\r\n-\r\n     // role:{\r\n     //     type:String,\r\n     //     enum:['user', 'admin'],\r\n     //     default:'user'\r\n"
                },
                {
                    "date": 1635320012857,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,13 +40,13 @@\n         type:Boolean,\r\n         default:true\r\n     },\r\n \r\n-    // role:{\r\n-    //     type:String,\r\n-    //     enum:['user', 'admin'],\r\n-    //     default:'user'\r\n-    // },\r\n+    role:{\r\n+        type:Boolean,\r\n+        enum:['1', '0'],\r\n+        default:'1'\r\n+    },\r\n     // contactphone:{\r\n     //     type:String,\r\n     //     unique:true,\r\n     // },\r\n"
                },
                {
                    "date": 1635320026336,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,10 +42,9 @@\n     },\r\n \r\n     role:{\r\n         type:Boolean,\r\n-        enum:['1', '0'],\r\n-        default:'1'\r\n+        default:true\r\n     },\r\n     // contactphone:{\r\n     //     type:String,\r\n     //     unique:true,\r\n"
                },
                {
                    "date": 1635322456374,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n     },\r\n \r\n     role:{\r\n         type:Boolean,\r\n-        default:true\r\n+        \r\n     },\r\n     // contactphone:{\r\n     //     type:String,\r\n     //     unique:true,\r\n"
                },
                {
                    "date": 1635322810705,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,8 +42,9 @@\n     },\r\n \r\n     role:{\r\n         type:Boolean,\r\n+        defautl:false,\r\n         \r\n     },\r\n     // contactphone:{\r\n     //     type:String,\r\n"
                },
                {
                    "date": 1635323264932,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,10 +42,10 @@\n     },\r\n \r\n     role:{\r\n         type:Boolean,\r\n-        defautl:false,\r\n-        \r\n+        enum:['1', '0'],\r\n+        default:false\r\n     },\r\n     // contactphone:{\r\n     //     type:String,\r\n     //     unique:true,\r\n"
                }
            ],
            "date": 1633141361615,
            "name": "Commit-0",
            "content": "const mongoose = require('mongoose');\r\n\r\nconst bcrypt = require('bcryptjs')\r\n\r\nconst userSchema = new mongoose.Schema({\r\n    username: {\r\n        type:String,\r\n        trim:true, \r\n        required:[true,\"username is required\"], \r\n    },\r\n    email: {\r\n        type:String, \r\n         trim:true, \r\n         required:[true,\"mssv is required\"], \r\n         maxlength:9\r\n    },\r\n    password: {\r\n        type:String,\r\n         required:[true,\"password is required\"], \r\n        minlength:[6, \r\n        'Password must be at least 6 character!']\r\n    },\r\n\r\n\r\n},{timestamps:true})\r\n\r\nuserSchema.pre('save', function(next){\r\n    let user = this; // get userget the user initialized from mongose\r\n\r\n    //bcrypt pass\r\n    bcrypt.hash(user.password, 10, function(error, hash){\r\n        if(error){\r\n            return next(error);\r\n        }else{\r\n            user.password = hash;\r\n            next();\r\n        }\r\n    })\r\n})\r\n\r\nconst User = mongoose.model('User', userSchema);\r\n\r\nmodule.exports = User;"
        }
    ]
}